#!/usr/bin/env node

/**
 * 引入模块
 */

var app = require('../app');
var debug = require('debug')('day07:server');
const fs = require('fs');

const path = require('path');
const config = require('../config/server');

// 配置服务器
var http, port, server;
if(config.local.open){
  http = require('http');
  port = config.local.port;
  server = http.createServer(app);
}else if(config.http.open){
  http = require('http');
  port = config.http.port;
  server = http.createServer(app);
}else if(config.https.open){
  http = require('https');
  port = config.https.port
  
  let options = {
    key: fs.readFileSync(path.join(__dirname, 'xxx.key')),
    pem: fs.readFileSync(path.join(__dirname, 'xxx.pem')),
  }
  server = http.createServer(options, app);
}



/**
 * Get port from environment and store in Express.
 */

 //调用normalizePort()获取环境变量~~listen
// port = normalizePort(process.env.PORT || '8099');
app.set('port', port);

/**
 * 创建原生http服务器
 */

// var server = http.createServer(app);

/**
 * 监听服务
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 校验这个端口是否是数字，字符或boolean
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * 监听服务器错误
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 处理特定听与友好的信息错误
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * 服务器监听事件的事件监听器.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
